@page "/"

@inject NotificationService NotificationService
@inject IJSRuntime JsRuntime

<RadzenNotification />
<PageTitle>Julekortgenerator</PageTitle>

<div class="row">
    <div class="col-12">
        <h1>Design ditt julekort</h1>
    </div>
</div>

<div class="row" >
    <div></div>
    <div class="col-2 p-5 pt-0">
        @*tekstboks overskrift*@
        <RadzenLabel Text="Overskrift:" />
        <RadzenTextBox @bind-Value="@ChristmasCard.Header" />

        <RadzenLabel Text="Tekstfarge" />
        <RadzenColorPicker @bind-Value="@ChristmasCard.TextColor1" />
    </div>
    <div class="col-2 p-5 pt-0">
        @*tekstboks mottaker*@
        <RadzenLabel Text="Mottaker:" />
        <RadzenTextBox @bind-Value="@ChristmasCard.ReceiverName" />
        <RadzenLabel Text="Tekstfarge" />
        <RadzenColorPicker @bind-Value="@ChristmasCard.TextColor2" />
    </div>
    <div class="col-2 p-5 pt-0">
        @*tekstboks avsender*@
        <RadzenLabel Text="Avsender:" />
        <RadzenTextBox @bind-Value="@ChristmasCard.SenderName" />
        <RadzenLabel Text="Tekstfarge" />
        <RadzenColorPicker @bind-Value="@ChristmasCard.TextColor3" />
    </div>


    <div class="col-2 p-5 pt-0">
        <RadzenLabel Text="Hilsning:" />
        <RadzenTextArea @bind-Value="@ChristmasCard.Greeting" />
        <RadzenLabel Text="Tekstfarge" />
        <RadzenColorPicker @bind-Value="@ChristmasCard.TextColor4" />

    </div>

    <div class="col-2 p-5 pt-0">
        <RadzenLabel Text="Font" />
                <RadzenRadioButtonList @bind-Value=@SelectedFont TValue="int" Orientation="Orientation.Vertical" Change="@FontSelected">
                    <Items>
                        <RadzenRadioButtonListItem Text="Arial" Value="0" />
                        <RadzenRadioButtonListItem Text="Courier New" Value="1" />
                        <RadzenRadioButtonListItem Text="Brush Script MT" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
        </div>
    </div>



<div class="row">
    <div class="col-12">
        <RadzenLabel Text="Bakgrunnsfarge" />
        <RadzenColorPicker @bind-Value="@ChristmasCard.BackGroundColor" />

        <RadzenLabel Text="Farge på border rundt kortet" />
        <RadzenColorPicker @bind-Value="@ChristmasCard.BorderColor" />



        <RadzenLabel Text="Velg bilde 1:" />
        <InputFile OnChange="args => LoadFiles(args, 0)" accept="image/*" />

        <RadzenLabel Text="Velg bilde 2:" />
        <InputFile OnChange="args => LoadFiles(args, 1)" accept="image/*" />

        <RadzenLabel Text="Velg bilde 3:" />
        <InputFile OnChange="args => LoadFiles(args, 2)" accept="image/*" />

        <RadzenButton Text="Lagre julekort..." ButtonStyle="ButtonStyle.Secondary" Click="GenerateCard" />
    </div>
</div>


<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>

<div class="container" style="background-color: @ChristmasCard.BackGroundColor; border: 4px double @ChristmasCard.BorderColor; font-family: @ChristmasCard.MyFont" id="christmasCard">
    <div class="row">
        <div class="col-12 text-center" style="color: @ChristmasCard.TextColor1">
            <h1>@ChristmasCard.Header</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-12 text-center" style="color: @ChristmasCard.TextColor2">
            @if (!string.IsNullOrEmpty(ChristmasCard.ReceiverName))
            {
                <h2>Kjære @ChristmasCard.ReceiverName </h2>
            }
            <h3 style="color: @ChristmasCard.TextColor4">
                @ChristmasCard.Greeting
            </h3>
        </div>
    </div>


    <div class="row">
        @if (string.IsNullOrEmpty(ChristmasCard.Images[0]) && string.IsNullOrEmpty(ChristmasCard.Images[2]))
        {
            <div class="col-12">
                <img src="@ChristmasCard.Images[0]" class="img-fluid" />
            </div>
        }
        else if (string.IsNullOrEmpty(ChristmasCard.Images[2]))
        {
            <div class="col-6">
                <img src="@ChristmasCard.Images[0]" class="img-fluid" />

            </div>
            <div class="col-6">
                <img src="@ChristmasCard.Images[1]" class="img-fluid" />
            </div>
        }
        else
        {
             <div class="col-4">
                <img src="@ChristmasCard.Images[0]" class="img-fluid" />

            </div>
            <div class="col-4">
                <img src="@ChristmasCard.Images[1]" class="img-fluid" />
            </div>
              <div class="col-4">
                <img src="@ChristmasCard.Images[2]" class="img-fluid" />
            </div>
        }

        <div class="row mt-3">
        <div class="col-12 text-center" style="color: @ChristmasCard.TextColor3">
            @if (!string.IsNullOrEmpty(@ChristmasCard.SenderName))
            {
                <h2>Hilsen @ChristmasCard.SenderName</h2>
            }
        </div>
    </div>
    </div>
</div>



@code {
    public ChristmasCard ChristmasCard { get; set; } = new ChristmasCard();
    public string ImageFormat { get; set; } = "image/jpeg";
    public MemoryStream NewImage { get; set; }
    public int SelectedFont { get; set; } = 0;
    private ChristmasCard[] ChristmasCards { get; set; }
    private List<ChristmasCard> GeneratedChristmasCards { get; set; } = new List<ChristmasCard>();


    private async void GenerateCard()
    {
        // Legg til generert julekort i liste
        GeneratedChristmasCards.Add(ChristmasCard);
        // Lagre liste til Array
        ChristmasCards = GeneratedChristmasCards.ToArray();
        // Lag bilde og last ned
        await JsRuntime.InvokeVoidAsync("takeScreenshot", "christmasCard");
    }

    private async void LoadFiles(InputFileChangeEventArgs file, int imageNumber)
    {
        try
        {
            var resizedImage = await file.File.RequestImageFileAsync(ImageFormat, 800, 800);
            NewImage = new MemoryStream();
            await resizedImage.OpenReadStream().CopyToAsync(NewImage);

            if (imageNumber == 1)
            {
                ChristmasCard.Images[0] = $"data:{ImageFormat};base64,{Convert.ToBase64String(NewImage.ToArray())}";
            }
            if (imageNumber == 2)
            {
                ChristmasCard.Images[1] = $"data:{ImageFormat};base64,{Convert.ToBase64String(NewImage.ToArray())}";
            }
            if (imageNumber == 3)
            {
                ChristmasCard.Images[2] = $"data:{ImageFormat};base64,{Convert.ToBase64String(NewImage.ToArray())}";
            }
            await InvokeAsync(StateHasChanged);

        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage { Detail = "Klarte ikke å laste opp bilde!", Severity = NotificationSeverity.Success, Summary = $"Feilmelding : {e.Message}" });
        }
    }
    
    private void FontSelected()
        {
            if (SelectedFont == 0)
            {
                ChristmasCard.MyFont = "";
            }
            else if (SelectedFont == 1)
             {
                ChristmasCard.MyFont = "";
            }
             else if (SelectedFont == 2)
             {
                ChristmasCard.MyFont = "";
            }
        }
    }